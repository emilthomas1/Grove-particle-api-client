{"version":3,"sources":["../src/EventStream.js"],"names":[],"mappings":"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","file":"EventStream.js","sourcesContent":["/* eslint max-depth: 0 */\nimport http from 'http';\nimport https from 'https';\nimport url from 'url';\nimport { EventEmitter } from 'events';\n\nclass EventStream extends EventEmitter {\n  constructor(uri, token, { debug } = {}) {\n    super();\n    this.uri = uri;\n    this.token = token;\n    this.debug = debug;\n  }\n\n  connect() {\n    return new Promise((resolve, reject) => {\n      const { hostname, protocol, port, path } = url.parse(this.uri);\n      this.origin = `${protocol}//${hostname}${port ? (':' + port) : ''}`;\n\n      const isSecure = protocol === 'https:';\n      const requestor = isSecure ? https : http;\n      const req = requestor.request({\n        hostname,\n        protocol,\n        path: `${path}?history_limit=30&access_token=${this.token}`,\n        method: 'get',\n        port: port || (isSecure ? 443 : 80),\n        avoidFetch: true,\n        mode: 'prefer-streaming'\n      });\n\n      this.req = req;\n      if (this.debug) {\n        this.debug(this);\n      }\n\n      req.on('error', e => {\n        reject({\n          error: e,\n          errorDescription: `Network error from ${this.uri}`,\n        });\n      });\n\n      req.on('response', res => {\n        const { statusCode } = res;\n        if (statusCode !== 200) {\n          let body = '';\n          res.on('data', chunk => body += chunk);\n          res.on('end', () => {\n            try {\n              // If the body is JSON parse it and emit that\n              body = JSON.parse(body);\n            } catch (e) {} // if it's not, no big deal just use original body\n            this.emit('response', { statusCode, body });\n            let errorDescription = `HTTP error ${statusCode} from ${this.uri}`;\n            if (body && body.error_description) {\n              errorDescription += ' - ' + body.error_description;\n            }\n            reject({ statusCode, errorDescription, body });\n            this.req = null;\n          });\n          return;\n        }\n\n        this.data = '';\n        this.buf = '';\n        this.eventName;\n        this.lastEventId;\n\n        res.on('data', this.parse.bind(this));\n        res.once('end', () => {\n          this.emit('end');\n          this.req = null;\n          this.removeAllListeners();\n        });\n        resolve(this);\n      });\n      req.end();\n    });\n  }\n\n  abort() {\n    if (this.req) {\n      this.req.abort();\n      this.req = null;\n    }\n    this.removeAllListeners();\n  }\n\n  parse(chunk) {\n    this.buf += chunk;\n    let pos = 0;\n    let length = this.buf.length;\n    let discardTrailingNewline = false;\n\n    while (pos < length) {\n      if (discardTrailingNewline) {\n        if (this.buf[pos] === '\\n') {\n          ++pos;\n        }\n        discardTrailingNewline = false;\n      }\n\n      let lineLength = -1;\n      let fieldLength = -1;\n\n      for (let i = pos; lineLength < 0 && i < length; ++i) {\n        const c = this.buf[i];\n        if (c === ':') {\n          if (fieldLength < 0) {\n            fieldLength = i - pos;\n          }\n        } else if (c === '\\r') {\n          discardTrailingNewline = true;\n          lineLength = i - pos;\n        } else if (c === '\\n') {\n          lineLength = i - pos;\n        }\n      }\n\n      if (lineLength < 0) {\n        break;\n      }\n\n      this.parseEventStreamLine(pos, fieldLength, lineLength);\n\n      pos += lineLength + 1;\n    }\n\n    if (pos === length) {\n      this.buf = '';\n    } else if (pos > 0) {\n      this.buf = this.buf.slice(pos);\n    }\n  }\n\n  parseEventStreamLine(pos, fieldLength, lineLength) {\n    if (lineLength === 0) {\n      try {\n        if (this.data.length > 0 && this.eventName) {\n          const event = JSON.parse(this.data);\n          event.name = this.eventName;\n          if (this.eventName !== 'event') {\n            this.emit(this.eventName, event);\n          }\n          this.emit('event', event);\n          this.data = '';\n        }\n        this.eventName = null;\n      } catch (e) {\n        // do nothing if JSON.parse fails\n      }\n    } else if (fieldLength > 0) {\n      const field = this.buf.slice(pos, pos + fieldLength);\n      let step = 0;\n\n      if (this.buf[pos + fieldLength + 1] !== ' ') {\n        step = fieldLength + 1;\n      } else {\n        step = fieldLength + 2;\n      }\n      pos += step;\n      const valueLength = lineLength - step;\n      const value = this.buf.slice(pos, pos + valueLength);\n\n      if (field === 'data') {\n        this.data += value + '\\n';\n      } else if (field === 'event') {\n        this.eventName = value;\n      } else if (field === 'id') {\n        this.lastEventId = value;\n      } else if (field === 'retry') {\n        const retry = parseInt(value, 10);\n        if (!Number.isNaN(retry)) {\n          this.reconnectInterval = retry;\n        }\n      }\n    }\n  }\n}\n\nexport default EventStream;\n"]}