{"version":3,"sources":["../src/Particle.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEM;AAEJ,WAFI,QAEJ,GAKQ;qEAAJ,kBAAI;;4BAJN,QAIM;QAJN,uCAAU,yCAIJ;iCAHN,aAGM;QAHN,iDAAe,mCAGT;6BAFN,SAEM;QAFN,yCAAW,+BAEL;QADN,mBACM;wCAPJ,UAOI;;AACN,SAAK,OAAL,GAAe,OAAf,CADM;AAEN,SAAK,YAAL,GAAoB,YAApB,CAFM;AAGN,SAAK,QAAL,GAAgB,QAAhB,CAHM;AAIN,SAAK,MAAL,GAAc,gCAAO,OAAP,CAAd,CAJM;AAKN,SAAK,KAAL,GAAa,KAAb,CALM;GALR;;;;;;;;;;;6BAFI;;iCAsBmD;;;UAA/C,0BAA+C;UAArC,0BAAqC;sCAA3B,cAA2B;UAA3B,oDAAgB,8BAAW;;AACrD,aAAO,KAAK,OAAL,CAAa,EAAE,KAAK,cAAL,EAAqB,MAAM;AAC7C,4BAD6C;AAE7C,4BAF6C;AAG7C,sBAAY,UAAZ;AACA,qBAAW,KAAK,QAAL;AACX,yBAAe,KAAK,YAAL;AACf,sBAAY,aAAZ;SANuC,EAOtC,QAAQ,MAAR,EAPE,EAQJ,IARI,CAQC,eAAO;AACX,cAAK,KAAL,GAAa,IAAI,IAAJ,CAAS,YAAT,CADF;AAEX,eAAO,GAAP,CAFW;OAAP,CARR,CADqD;;;;;;;;;;;;sCAqBpB;UAAtB,0BAAsB;UAAZ,0BAAY;;AACjC,aAAO,KAAK,IAAL,CAAU,WAAV,EAAuB;AAC5B,0BAD4B,EAClB,kBADkB;OAAvB,CAAP,CADiC;;;;;;;;;;;;;6CAac;UAA7B,0BAA6B;UAAnB,0BAAmB;UAAT,oBAAS;;AAC/C,aAAO,KAAK,MAAL,wBAAiC,KAAjC,EAA0C;AAC/C,sBAAc,KAAd;OADK,EAEJ,EAAE,kBAAF,EAAY,kBAAZ,EAFI,CAAP,CAD+C;;;;;;;;;;;;4CAYR;UAAtB,0BAAsB;UAAZ,0BAAY;;AACvC,aAAO,KAAK,GAAL,CAAS,mBAAT,EAA8B,EAAE,kBAAF,EAAY,kBAAZ,EAA9B,CAAP,CADuC;;;;;;;;;;;uCASnB;UAAR,kBAAQ;;AACpB,aAAO,KAAK,GAAL,CAAS,aAAT,EAAwB,IAAxB,CAAP,CADoB;;;;;;;;;;;;qCAUQ;UAAlB,0BAAkB;UAAR,kBAAQ;;AAC5B,aAAO,KAAK,GAAL,kBAAwB,QAAxB,EAAoC,IAApC,CAAP,CAD4B;;;;;;;;;;;;uCAUmB;UAAnC,0BAAmC;UAAzB,wCAAyB;UAAR,kBAAQ;;AAC/C,aAAO,KAAK,OAAL,CAAa,EAAE,KAAK,aAAL,EAAoB,MAAM;AAC9C,cAAI,QAAJ;AACA,4BAAkB,CAAC,CAAC,eAAD;SAFqB,EAGvC,UAHiB,EAGX,QAAQ,MAAR,EAHF,CAAP,CAD+C;;;;;;;;;;;;wCAahB;UAAlB,0BAAkB;UAAR,kBAAQ;;AAC/B,aAAO,KAAK,MAAL,kBAA2B,QAA3B,EAAuC,IAAvC,EAA6C,IAA7C,CAAP,CAD+B;;;;;;;;;;;;;yCAWM;UAAxB,2BAAwB;UAAd,mBAAc;UAAR,mBAAQ;;AACrC,aAAO,KAAK,GAAL,kBAAwB,QAAxB,EAAoC,EAAE,UAAF,EAApC,EAA8C,IAA9C,CAAP,CADqC;;;;;;;;;;;;yCAUT;UAAf,mBAAe;UAAT,qBAAS;;AAC5B,aAAO,KAAK,IAAL,CAAU,mBAAV,EAA+B,EAAE,YAAF,EAA/B,EAA0C,IAA1C,CAAP,CAD4B;;;;8CAIO;UAAlB,mBAAkB;UAAZ,6BAAY;;AACnC,aAAO,KAAK,GAAL,qBAA2B,SAA3B,EAAwC,IAAxC,CAAP,CADmC;;;;0CAIsB;UAA3C,2BAA2C;UAAjC,6BAAiC;UAAtB,mCAAsB;UAAR,mBAAQ;;AACzD,aAAO,KAAK,GAAL,kBAAwB,QAAxB,EAAoC;AACzC,oBAAY,SAAZ;AACA,4BAAoB,gBAAgB,KAAhB;OAFf,EAGJ,IAHI,CAAP,CADyD;;;;;;;;;;;;;wCAcrB;UAAxB,2BAAwB;UAAd,mBAAc;UAAR,mBAAQ;;AACpC,aAAO,KAAK,GAAL,kBAAwB,iBAAY,IAApC,EAA4C,IAA5C,CAAP,CADoC;;;;;;;;;;;;;yCAWG;UAA1B,2BAA0B;UAAhB,uBAAgB;UAAR,mBAAQ;;AACvC,aAAO,KAAK,GAAL,kBAAwB,QAAxB,EAAoC;AACzC,gBAAU,CAAC,CAAC,MAAD,GAAU,GAAX,GAAiB,GAAjB;OADL,EAEJ,IAFI,CAAP,CADuC;;;;;;;;;;;;;;wCAca;UAAxC,2BAAwC;UAA9B,qBAA8B;UAAvB,qCAAuB;UAAR,mBAAQ;;AACpD,UAAM,OAAO,EAAP,CAD8C;AAEpD,UAAI,aAAJ,EAAmB;AACjB,aAAK,oBAAL,GAA4B,aAA5B,CADiB;OAAnB,MAEO;AACL,aAAK,MAAL,GAAc,MAAd,CADK;OAFP;AAKA,aAAO,KAAK,OAAL,CAAa,EAAE,sBAAoB,QAApB;AACpB,oBADkB,EACX,UADW,EACL,UADK,EACC,QAAQ,KAAR,EADd,CAAP,CAPoD;;;;;;;;;;;;wCAiBtB;UAAlB,2BAAkB;UAAR,mBAAQ;;AAC9B,aAAO,KAAK,GAAL,kBAAwB,QAAxB,EAAoC;AACzC,aAAK,QAAL;OADK,EAEJ,IAFI,CAAP,CAD8B;;;;;;;;;;;;;;wCAcwB;UAA1C,qBAA0C;UAAnC,+BAAmC;UAAvB,qCAAuB;UAAR,mBAAQ;;AACtD,UAAM,OAAO,EAAE,aAAa,UAAb,EAAT,CADgD;AAEtD,UAAI,aAAJ,EAAmB;AACjB,aAAK,oBAAL,GAA4B,aAA5B,CADiB;OAAnB,MAEO;AACL,aAAK,MAAL,GAAc,MAAd,CADK;OAFP;AAKA,aAAO,KAAK,OAAL,CAAa,EAAE,KAAK,cAAL;AACpB,oBADkB,EACX,UADW,EACL,UADK,EACC,QAAQ,MAAR,EADd,CAAP,CAPsD;;;;;;;;;;;;mDAiBb;UAAlB,2BAAkB;UAAR,mBAAQ;;AACzC,UAAM,wBAAsB,QAAtB,CADmC;AAEzC,UAAM,MAAM,0BAAQ,KAAR,EAAe,GAAf,CAAN,CAFmC;AAGzC,UAAI,GAAJ,CAAQ,KAAK,MAAL,CAAR,CAHyC;AAIzC,WAAK,OAAL,CAAa,GAAb,EAAkB,IAAlB,EAJyC;AAKzC,UAAI,KAAK,KAAL,EAAY;AACd,aAAK,KAAL,CAAW,GAAX,EADc;OAAhB;AAGA,aAAO,GAAP,CARyC;;;;;;;;;;;;;;0CAmBO;UAAlC,2BAAkC;UAAxB,iBAAwB;UAAnB,6BAAmB;UAAR,mBAAQ;;AAChD,aAAO,KAAK,IAAL,uBAA8B,QAA9B,EAA0C;AAC/C,kBAAU,QAAV;AACA,mBAAa,OAAO,GAAP,KAAe,QAAf,GAA0B,GAA1B,GAAgC,IAAI,QAAJ,EAAhC;AACb,kBAAU,cAAV;AACA,2BAAkB,KAAK,GAAL,EAAlB;AACA,mBAAW,aAAa,KAAb;OALN,EAMJ,IANI,CAAP,CADgD;;;;;;;;;;;;;;yCAkBD;UAAlC,2BAAkC;UAAxB,mBAAwB;UAAlB,2BAAkB;UAAR,mBAAQ;;AAC/C,aAAO,KAAK,IAAL,kBAAyB,iBAAY,IAArC,EAA6C;AAClD,cAAM,QAAN;OADK,EAEJ,IAFI,CAAP,CAD+C;;;;;;;;;;;;;;;;2CAgBmB;UAAnD,2BAAmD;UAAzC,mBAAyC;UAAnC,iBAAmC;UAA9B,yBAA8B;+BAArB,KAAqB;UAArB,mCAAO,KAAK,KAAL,eAAc;;AAClE,UAAI,MAAM,MAAN,CAD8D;AAElE,UAAI,GAAJ,EAAS;AACP,yBAAe,SAAf,CADO;AAEP,YAAI,OAAJ,EAAa;AACX,+BAAmB,aAAnB,CADW;SAAb,MAEO,IAAI,YAAY,SAAS,WAAT,OAA2B,MAA3B,EAAmC;AACxD,8BAAkB,cAAlB,CADwD;SAAnD;AAGP,eAAO,QAAP,CAPO;OAAT,MAQO;AACL,YAAI,CAAC,QAAD,EAAW;AACb,iBAAO,QAAP,CADa;SAAf,MAEO,IAAI,SAAS,WAAT,OAA2B,MAA3B,EAAmC;AAC5C,iBAAO,gBAAP,CAD4C;SAAvC,MAEA;AACL,8BAAkB,oBAAlB,CADK;SAFA;OAXT;;AAkBA,UAAI,IAAJ,EAAU;AACR,qBAAW,mBAAmB,IAAnB,CAAX,CADQ;OAAV;AAGA,aAAO,+BAAmB,KAAK,OAAL,GAAe,GAAlC,EAAyC,IAAzC,EAA+C,EAAE,OAAO,KAAK,KAAL,EAAxD,EAAsE,OAAtE,EAAP,CAvBkE;;;;;;;;;;;;;;yCAkCtB;UAA/B,mBAA+B;UAAzB,mBAAyB;UAAnB,6BAAmB;UAAR,mBAAQ;;AAC5C,aAAO,KAAK,IAAL,CAAU,oBAAV,EAAgC;AACrC,kBADqC;AAErC,kBAFqC;AAGrC,mBAAW,SAAX;OAHK,EAIJ,IAJI,CAAP,CAD4C;;;;;;;;;;;;;;;;;;;;;0CAuByE;UAAvG,2BAAuG;UAA7F,mBAA6F;UAAvF,iBAAuF;UAAlF,iCAAkF;UAArE,yBAAqE;UAA5D,mBAA4D;UAAtD,qBAAsD;UAA/C,+CAA+C;UAA3B,iCAA2B;UAAd,mBAAc;UAAR,mBAAQ;;AACrH,UAAM,OAAO,EAAE,OAAO,IAAP,EAAa,QAAf,EAAoB,wBAApB,EAAiC,gBAAjC,EAA0C,UAA1C,EAAgD,YAAhD,EAAuD,sCAAvD,EAA2E,MAAM,WAAN,EAAmB,UAA9F,EAAP,CAD+G;AAErH,UAAI,aAAa,MAAb,EAAqB;AACvB,aAAK,SAAL,GAAiB,IAAjB,CADuB;OAAzB,MAEO;AACL,aAAK,QAAL,GAAgB,QAAhB,CADK;OAFP;AAKA,aAAO,KAAK,IAAL,CAAU,cAAV,EAA0B,IAA1B,EAAgC,IAAhC,CAAP,CAPqH;;;;;;;;;;;;0CAgBvF;UAAhB,uBAAgB;UAAR,mBAAQ;;AAC9B,aAAO,KAAK,MAAL,mBAA4B,MAA5B,EAAsC,IAAtC,EAA4C,IAA5C,CAAP,CAD8B;;;;;;;;;;;yCAST;UAAR,mBAAQ;;AACrB,aAAO,KAAK,GAAL,CAAS,cAAT,EAAyB,IAAzB,CAAP,CADqB;;;;;;;;;;;wCASD;UAAR,mBAAQ;;AACpB,aAAO,KAAK,GAAL,CAAS,UAAT,EAAqB,IAArB,CAAP,CADoB;;;;wCAIa;UAArB,iCAAqB;UAAR,mBAAQ;;AACjC,aAAO,KAAK,GAAL,CAAS,UAAT,EAAqB;AAC1B,sBAAc,WAAd;OADK,EAEJ,IAFI,CAAP,CADiC;;;;qCAMT;UAAf,qBAAe;UAAR,mBAAQ;;AACxB,aAAO,KAAK,IAAL,eAAsB,KAAtB,EAA+B,IAA/B,CAAP,CADwB;;;;wCAI2B;UAAvC,qBAAuC;UAAhC,iCAAgC;UAAnB,6BAAmB;UAAR,mBAAQ;;AACnD,aAAO,KAAK,GAAL,eAAqB,KAArB,EAA8B;AACnC,iBAAS,WAAT;AACA,oBAAY,SAAZ;AACA,gBAAQ,UAAR;OAHK,EAIJ,IAJI,CAAP,CADmD;;;;;;;;;;;;6CAcZ;UAAtB,mBAAsB;UAAhB,mCAAgB;;AACvC,UAAI,cAAJ,CADuC;AAEvC,UAAI,iBAAiB,SAAjB,EAA4B;AAC9B,gBAAQ,EAAE,UAAU,CAAC,CAAC,YAAD,EAArB,CAD8B;OAAhC;AAGA,aAAO,KAAK,GAAL,CAAS,mBAAT,EAA8B,IAA9B,EAAoC,KAApC,CAAP,CALuC;;;;wBAQrC,KAAK,MAAM,OAAO;AACpB,aAAO,KAAK,OAAL,CAAa,EAAE,QAAF,EAAO,UAAP,EAAa,QAAQ,KAAR,EAAe,OAAO,KAAP,EAAzC,CAAP,CADoB;;;;yBAIjB,KAAK,MAAM;AACd,aAAO,KAAK,OAAL,CAAa,EAAE,QAAF,EAAO,UAAP,EAAa,QAAQ,MAAR,EAA1B,CAAP,CADc;;;;yBAIX,KAAK,MAAM,MAAM;AACpB,aAAO,KAAK,OAAL,CAAa,EAAE,QAAF,EAAO,UAAP,EAAa,UAAb,EAAmB,QAAQ,MAAR,EAAhC,CAAP,CADoB;;;;wBAIlB,KAAK,MAAM,MAAM;AACnB,aAAO,KAAK,OAAL,CAAa,EAAE,QAAF,EAAO,UAAP,EAAa,UAAb,EAAmB,QAAQ,KAAR,EAAhC,CAAP,CADmB;;;;4BAId,KAAK,MAAM,MAAM;AACtB,aAAO,KAAK,OAAL,CAAa,EAAE,QAAF,EAAO,UAAP,EAAa,UAAb,EAAmB,QAAQ,QAAR,EAAhC,CAAP,CADsB;;;;oCAI8C;;;UAA5D,iBAA4D;UAAvD,uBAAuD;UAA/C,mBAA+C;+BAAzC,KAAyC;UAAzC,mCAAO,KAAK,KAAL,eAAkC;UAAtB,qBAAsB;UAAf,mBAAe;UAAT,qBAAS;;AACpE,aAAO,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAM,MAAM,0BAAQ,MAAR,EAAgB,GAAhB,CAAN,CADgC;AAEtC,YAAI,GAAJ,CAAQ,OAAK,MAAL,CAAR,CAFsC;AAGtC,eAAK,OAAL,CAAa,GAAb,EAAkB,IAAlB,EAHsC;AAItC,YAAI,KAAJ,EAAW;AACT,cAAI,KAAJ,CAAU,KAAV,EADS;SAAX;AAGA,YAAI,KAAJ,EAAW;AACT,8BAAY,KAAZ,EAAmB,OAAnB,CAA2B,UAAC,CAAD,EAAI,CAAJ,EAAU;AACnC,gBAAI,MAAJ,WAAkB,IAAI,CAAJ,CAAlB,EAA2B,MAAM,CAAN,CAA3B,EAAqC,CAArC,EADmC;WAAV,CAA3B,CADS;AAIT,cAAI,IAAJ,EAAU;AACR,gCAAY,IAAZ,EAAkB,OAAlB,CAA0B,aAAK;AAC7B,kBAAI,KAAJ,CAAU,CAAV,EAAa,KAAK,CAAL,CAAb,EAD6B;aAAL,CAA1B,CADQ;WAAV;SAJF,MASO,IAAI,IAAJ,EAAU;AACf,cAAI,IAAJ,CAAS,MAAT,EADe;AAEf,cAAI,IAAJ,CAAS,IAAT,EAFe;SAAV,MAGA,IAAI,IAAJ,EAAU;AACf,cAAI,IAAJ,CAAS,IAAT,EADe;SAAV;;AAIP,YAAI,OAAK,KAAL,EAAY;AACd,iBAAK,KAAL,CAAW,GAAX,EADc;SAAhB;;AAIA,YAAI,GAAJ,CAAQ,UAAC,KAAD,EAAQ,GAAR,EAAgB;AACtB,cAAM,OAAO,OAAO,IAAI,IAAJ,CADE;AAEtB,cAAI,KAAJ,EAAW;AACT,gBAAM,aAAa,MAAM,MAAN,CADV;AAET,gBAAI,oBAAsB,aAAa,YAAb,GAA4B,eAA5B,UAA+C,wBAAmB,GAAxF,CAFK;AAGT,gBAAI,QAAQ,KAAK,iBAAL,EAAwB;AAClC,kCAAoB,QAAQ,KAAK,iBAAL,CADM;aAApC;AAGA,mBAAO,EAAE,sBAAF,EAAc,kCAAd,EAAgC,YAAhC,EAAuC,UAAvC,EAAP,EANS;WAAX,MAOO;AACL,oBAAQ;AACN,wBADM;AAEN,0BAAY,IAAI,UAAJ;aAFd,EADK;WAPP;SAFM,CAAR,CA3BsC;OAArB,CAAnB,CADoE;;;;4BA+C9D,KAAK,MAAM;AACjB,UAAI,CAAC,IAAD,EAAO;AACT,eADS;OAAX;;AAIA,UAAI,QAAO,iEAAP,KAAgB,QAAhB,EAA0B;AAC5B,YAAI,IAAJ,CAAS,KAAK,QAAL,EAAe,KAAK,QAAL,CAAxB,CAD4B;OAA9B,MAEO;AACL,YAAI,GAAJ,CAAQ,EAAE,2BAAyB,IAAzB,EAAV,EADK;OAFP;;;SA9dE;;;kBAseS","file":"Particle.js","sourcesContent":["import request from 'superagent';\nimport prefix from 'superagent-prefix';\nimport EventStream from './EventStream';\n\nclass Particle {\n\n  constructor({\n    baseUrl = 'https://api.particle.io',\n    clientSecret = 'particle-api',\n    clientId = 'particle-api',\n    token,\n  } = {}) {\n    this.baseUrl = baseUrl;\n    this.clientSecret = clientSecret;\n    this.clientId = clientId;\n    this.prefix = prefix(baseUrl);\n    this.token = token;\n  }\n\n  /**\n   * Login to Particle Cloud using an existing Particle acccount.\n   * @param  {String} $0.username      Username for the Particle account\n   * @param  {String} $0.password      Password for the Particle account\n   * @param  {Number} $0.tokenDuration How long the access token should last in seconds\n   * @return {Promise}\n   */\n  login({ username, password, tokenDuration = 7776000 }) { // default to 90 days\n    return this.request({ uri: '/oauth/token', form: {\n        username,\n        password,\n        grant_type: 'password',\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        expires_in: tokenDuration,\n      }, method: 'post' })\n      .then(res => {\n        this.token = res.body.access_token;\n        return res;\n      });\n  }\n\n  /**\n   * Create a user account for the Particle Cloud\n   * @param  {String} $0.username Desired username\n   * @param  {String} $0.password Password\n   * @return {Promise}\n   */\n  createUser({ username, password }) {\n    return this.post('/v1/users', {\n      username, password,\n    });\n  }\n\n  /**\n   * Revoke an access token\n   * @param  {String} $0.username Username of the Particle cloud account that the token belongs to.\n   * @param  {String} $0.password Password for the account\n   * @param  {String} $0.token    Access token you wish to revoke\n   * @return {Promise}\n   */\n  removeAccessToken({ username, password, token }) {\n    return this.delete(`/v1/access_tokens/${token}`, {\n      access_token: token,\n    }, { username, password });\n  }\n\n  /**\n   * List all valid access tokens for a Particle Cloud account\n   * @param  {String} $0.username Username\n   * @param  {String} $0.password Password\n   * @return {Promise}\n   */\n  listAccessTokens({ username, password }) {\n    return this.get('/v1/access_tokens', { username, password });\n  }\n\n  /**\n   * List devices claimed to the account\n   * @param  {String} $0.auth Access Token\n   * @return {Promise}\n   */\n  listDevices({ auth }) {\n    return this.get('/v1/devices', auth);\n  }\n\n  /**\n   * Get detailed informationa about a device\n   * @param  {String} $0.deviceId Device ID or Name\n   * @param  {String} $0.auth     Access token\n   * @return {Promise}\n   */\n  getDevice({ deviceId, auth }) {\n    return this.get(`/v1/devices/${deviceId}`, auth);\n  }\n\n  /**\n   * Claim a device to the account. The device must be online and unclaimed.\n   * @param  {String} $0.deviceId Device ID\n   * @param  {String} $0.auth     Access Token\n   * @return {Promise}\n   */\n  claimDevice({ deviceId, requestTransfer, auth }) {\n    return this.request({ uri: '/v1/devices', form: {\n      id: deviceId,\n      request_transfer: !!requestTransfer\n    }, auth, method: 'post' });\n  }\n\n  /**\n   * Unclaim / Remove a device from your account\n   * @param  {String} $0.deviceId Device ID or Name\n   * @param  {String} $0.auth     Access Token\n   * @return {Promise}\n   */\n  removeDevice({ deviceId, auth }) {\n    return this.delete(`/v1/devices/${deviceId}`, null, auth);\n  }\n\n  /**\n   * Rename a device\n   * @param  {String} $0.deviceId Device ID or Name\n   * @param  {String} $0.name     Desired Name\n   * @param  {String} $0.auth     Access Token\n   * @return {Promise}\n   */\n  renameDevice({ deviceId, name, auth }) {\n    return this.put(`/v1/devices/${deviceId}`, { name }, auth);\n  }\n\n  /**\n   * Generate a claim code to use in the device claiming process.\n   * @param  {String} $0.auth  Access Token\n   * @param  {String} [$0.iccid] ICCID of the SIM card used in the Electron\n   * @return {Promise}\n   */\n  getClaimCode({ auth, iccid }) {\n    return this.post('/v1/device_claims', { iccid }, auth);\n  }\n\n  validatePromoCode({auth, promoCode}) {\n    return this.get(`/v1/promo_code/${promoCode}`, auth);\n  }\n\n  changeProduct({ deviceId, productId, shouldUpdate, auth }) {\n    return this.put(`/v1/devices/${deviceId}`, {\n      product_id: productId,\n      update_after_claim: shouldUpdate || false,\n    }, auth);\n  }\n\n  /**\n   * Get the value of a device variable\n   * @param  {String} $0.deviceId Device ID or Name\n   * @param  {String} $0.name     Variable name\n   * @param  {String} $0.auth     Access Token\n   * @return {Promise}\n   */\n  getVariable({ deviceId, name, auth }) {\n    return this.get(`/v1/devices/${deviceId}/${name}`, auth);\n  }\n\n  /**\n   * Instruct the device to turn on/off the LED in a rainbow pattern\n   * @param  {String} $0.deviceId Device ID or Name\n   * @param  {Boolean} $0.signal   Signal on or off\n   * @param  {String} $0.auth     Access Token\n   * @return {Promise}\n   */\n  signalDevice({ deviceId, signal, auth }) {\n    return this.put(`/v1/devices/${deviceId}`, {\n      signal: ( !!signal ? '1' : '0' ),\n    }, auth);\n  }\n\n  /**\n   * Compile and flash application firmware to a device\n   * @param  {String} $0.deviceId      Device ID or Name\n   * @param  {Object} $0.files         Object containing files to be compiled. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n   * @param  {String} [$0.targetVersion=latest] System firmware version to compile against\n   * @param  {String} $0.auth          String\n   * @return {Promise}\n   */\n  flashDevice({ deviceId, files, targetVersion, auth }) {\n    const form = {};\n    if (targetVersion) {\n      form.build_target_version = targetVersion;\n    } else {\n      form.latest = 'true';\n    }\n    return this.request({ uri: `/v1/devices/${deviceId}`,\n      files, auth, form, method: 'put' });\n  }\n\n  /**\n   * Flash the Tinker application to a device\n   * @param  {String} $0.deviceId Device ID or Name\n   * @param  {String} $0.auth     Access Token\n   * @return {Promise}\n   */\n  flashTinker({ deviceId, auth }) {\n    return this.put(`/v1/devices/${deviceId}`, {\n      app: 'tinker',\n    }, auth);\n  }\n\n  /**\n   * Compile firmware using the Particle Cloud\n   * @param  {Object} $0.files         Object containing files to be compiled. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n   * @param  {Number} [$0.platformId]    Platform id number of the device you are compiling for. Common values are 0=Core, 6=Photon, 10=Electron.\n   * @param  {String} [$0.targetVersion=latest] System firmware version to compile against\n   * @param  {String} $0.auth          Access Token\n   * @return {Promise}\n   */\n  compileCode({ files, platformId, targetVersion, auth }) {\n    const form = { platform_id: platformId };\n    if (targetVersion) {\n      form.build_target_version = targetVersion;\n    } else {\n      form.latest = 'true';\n    }\n    return this.request({ uri: '/v1/binaries',\n      files, auth, form, method: 'post' });\n  }\n\n  /**\n   * Download a firmware binary\n   * @param  {String} $0.binaryId Binary ID received from a successful compile call\n   * @param  {String} $0.auth     Access Token\n   * @return {Request}\n   */\n  downloadFirmwareBinary({ binaryId, auth }) {\n    const uri = `/v1/binaries/${binaryId}`;\n    const req = request('get', uri);\n    req.use(this.prefix);\n    this.headers(req, auth);\n    if (this.debug) {\n      this.debug(req);\n    }\n    return req;\n  }\n\n  /**\n   * Send a new device public key to the Particle Cloud\n   * @param  {String} $0.deviceId  Device ID or Name\n   * @param  {(String|Buffer)} $0.key       Public key contents\n   * @param  {String} [$0.algorithm=rsa] Algorithm used to generate the public key. Valid values are `rsa` or `ecc`.\n   * @param  {String} $0.auth      Access Token\n   * @return {Promise}\n   */\n  sendPublicKey({ deviceId, key, algorithm, auth }) {\n    return this.post(`/v1/provisioning/${deviceId}`, {\n      deviceID: deviceId,\n      publicKey: ( typeof key === 'string' ? key : key.toString() ),\n      filename: 'particle-api',\n      order: `manual_${ Date.now() }`,\n      algorithm: algorithm || 'rsa'\n    }, auth);\n  }\n\n  /**\n   * Call a device function\n   * @param  {String} $0.deviceId Device ID or Name\n   * @param  {String} $0.name     Function name\n   * @param  {String} $0.argument Function argument\n   * @param  {String} $0.auth     Access Token\n   * @return {Promise}\n   */\n  callFunction({ deviceId, name, argument, auth }) {\n    return this.post(`/v1/devices/${deviceId}/${name}`, {\n      args: argument,\n    }, auth);\n  }\n\n  /**\n   * Get a stream of events\n   * @param  {String} [$0.deviceId] Device ID or Name, or `mine` to indicate only your devices.\n   * @param  {String} [$0.name]     Event Name\n   * @param  {String} [$0.org]     Organization Slug\n   * @param  {String} [$0.product]     Product Slug\n   * @param  {String} $0.auth     Access Token\n   * @return {Promise} If the promise resolves, the resolution value will be an EventStream object that will\n   * emit 'event' events, as well as the specific named event.\n   */\n  getEventStream({ deviceId, name, org, product, auth = this.token }) {\n    let uri = '/v1/';\n    if (org) {\n      uri += `orgs/${org}/`;\n      if (product) {\n        uri += `products/${product}/`;\n      } else if (deviceId && deviceId.toLowerCase() !== 'mine') {\n        uri += `devices/${deviceId}/`;\n      }\n      uri += 'events';\n    } else {\n      if (!deviceId) {\n        uri += 'events';\n      } else if (deviceId.toLowerCase() === 'mine') {\n        uri += 'devices/events';\n      } else {\n        uri += `devices/${deviceId}/events`;\n      }\n    }\n\n    if (name) {\n      uri += `/${encodeURIComponent(name)}`;\n    }\n    return new EventStream(`${this.baseUrl}${uri}`, auth, { debug: this.debug }).connect();\n  }\n\n  /**\n   * Publish a event to the Particle Cloud\n   * @param  {String} $0.name      Event name\n   * @param  {String} $0.data      Event data\n   * @param  {Boolean} $0.isPrivate Should the event be publicly available?\n   * @param  {String} $0.auth      Access Token\n   * @return {Promise}\n   */\n  publishEvent({ name, data, isPrivate, auth }) {\n    return this.post('/v1/devices/events', {\n      name,\n      data,\n      'private': isPrivate\n    }, auth);\n  }\n\n  /**\n   * Create a webhook\n   * @param  {String} $0.deviceId           Device ID or Name\n   * @param  {String} $0.name               Webhook name\n   * @param  {String} $0.url                URL the webhook should hit\n   * @param  {String} [$0.requestType=POST]        HTTP method to use\n   * @param  {Object} [$0.headers]            Additional headers to add to the webhook\n   * @param  {Object} [$0.json]               JSON data\n   * @param  {Object} [$0.query]              Query string data\n   * @param  {Boolean} [$0.rejectUnauthorized] Reject invalid HTTPS certificates\n   * @param  {Object} [$0.webhookAuth]        HTTP Basic Auth information\n   * @param  {Object} [$0.form]               Form data\n   * @param  {String} $0.auth               Access Token\n   * @return {Promise}\n   */\n  createWebhook({ deviceId, name, url, requestType, headers, json, query, rejectUnauthorized, webhookAuth, form, auth }) {\n    const data = { event: name, url, requestType, headers, json, query, rejectUnauthorized, auth: webhookAuth, form };\n    if (deviceId === 'mine') {\n      data.mydevices = true;\n    } else {\n      data.deviceid = deviceId;\n    }\n    return this.post('/v1/webhooks', data, auth);\n  }\n\n  /**\n   * Delete a webhook\n   * @param  {String} $0.hookId Webhook ID\n   * @param  {String} $0.auth   Access Token\n   * @return {Promise}\n   */\n  deleteWebhook({ hookId, auth }) {\n    return this.delete(`/v1/webhooks/${hookId}`, null, auth);\n  }\n\n  /**\n   * List all webhooks owned by the account\n   * @param  {String} $0.auth Access Token\n   * @return {Promise}\n   */\n  listWebhooks({ auth }) {\n    return this.get('/v1/webhooks', auth);\n  }\n\n  /**\n   * Get details about the current user\n   * @param  {String} $0.auth Access Token\n   * @return {Promise}\n   */\n  getUserInfo({ auth }) {\n    return this.get('/v1/user', auth);\n  }\n\n  setUserInfo({ stripeToken, auth }) {\n    return this.put('/v1/user', {\n      stripe_token: stripeToken,\n    }, auth);\n  }\n\n  checkSIM({ iccid, auth }) {\n    return this.head(`/v1/sims/${iccid}`, auth);\n  }\n\n  activateSIM({ iccid, countryCode, promoCode, auth }) {\n    return this.put(`/v1/sims/${iccid}`, {\n      country: countryCode,\n      promo_code: promoCode,\n      action: 'activate',\n    }, auth);\n  }\n\n  /**\n   * List valid build targets to be used for compiling\n   * @param  {String} $0.auth         Access Token\n   * @param  {Boolean} [$0.onlyFeatured=false] Only list featured build targets\n   * @return {Promise}\n   */\n  listBuildTargets({ auth, onlyFeatured }) {\n    let query;\n    if (onlyFeatured !== undefined) {\n      query = { featured: !!onlyFeatured };\n    }\n    return this.get('/v1/build_targets', auth, query);\n  }\n\n  get(uri, auth, query) {\n    return this.request({ uri, auth, method: 'get', query: query });\n  }\n\n  head(uri, auth) {\n    return this.request({ uri, auth, method: 'head' });\n  }\n\n  post(uri, data, auth) {\n    return this.request({ uri, data, auth, method: 'post' });\n  }\n\n  put(uri, data, auth) {\n    return this.request({ uri, data, auth, method: 'put' });\n  }\n\n  delete(uri, data, auth) {\n    return this.request({ uri, data, auth, method: 'delete' });\n  }\n\n  request({ uri, method, data, auth = this.token, query, form, files }) {\n    return new Promise((fulfill, reject) => {\n      const req = request(method, uri);\n      req.use(this.prefix);\n      this.headers(req, auth);\n      if (query) {\n        req.query(query);\n      }\n      if (files) {\n        Object.keys(files).forEach((k, i) => {\n          req.attach(`file${i + 1}`, files[k], k);\n        });\n        if (form) {\n          Object.keys(form).forEach(k => {\n            req.field(k, form[k]);\n          });\n        }\n      } else if (form) {\n        req.type('form');\n        req.send(form);\n      } else if (data) {\n        req.send(data);\n      }\n\n      if (this.debug) {\n        this.debug(req);\n      }\n\n      req.end((error, res) => {\n        const body = res && res.body;\n        if (error) {\n          const statusCode = error.status;\n          let errorDescription = `${statusCode ? 'HTTP error' : 'Network error'} ${statusCode} from ${uri}`;\n          if (body && body.error_description) {\n            errorDescription += ' - ' + body.error_description;\n          }\n          reject({ statusCode, errorDescription, error, body });\n        } else {\n          fulfill({\n            body,\n            statusCode: res.statusCode,\n          });\n        }\n      });\n    });\n  }\n\n  headers(req, auth) {\n    if (!auth) {\n      return;\n    }\n\n    if (typeof auth === 'object') {\n      req.auth(auth.username, auth.password);\n    } else {\n      req.set({ Authorization: `Bearer ${auth}` });\n    }\n  }\n}\n\nexport default Particle;\n"]}